[0m[[0m[0mdebug[0m] [0m[0mThe mc.parser.MCLexer has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(GEQ,[Default]), UsedName(ERROR_CHAR,[Default]), UsedName(DIV,[Default]), UsedName(DO,[Default]), UsedName(T__0,[Default]), UsedName(RETURN,[Default]), UsedName(FLOATTYPE,[Default]), UsedName(INTTYPE,[Default]), UsedName(ADD,[Default]), UsedName(UNTIL,[Default]), UsedName(MOL,[Default]), UsedName(COMMENT,[Default]), UsedName(REPEAT,[Default]), UsedName(LT,[Default]), UsedName(BOOLLIT,[Default]), UsedName(RB,[Default]), UsedName(NEQ,[Default]), UsedName(MUL,[Default]), UsedName(UNCLOSE_STRING,[Default]), UsedName(BOOLTYPE,[Default]), UsedName(FLOATLIT,[Default]), UsedName(ILLEGAL_ESCAPE,[Default]), UsedName(SEMI,[Default]), UsedName(UNSIGNINT,[Default]), UsedName(GT,[Default]), UsedName(STRINGTYPE,[Default]), UsedName(EQ,[Default]), UsedName(INTLIT,[Default]), UsedName(LP,[Default]), UsedName(CM,[Default]), UsedName(VOIDTYPE,[Default]), UsedName(STRINGLIT,[Default]), UsedName(SUB,[Default]), UsedName(ASSIGN,[Default]), UsedName(LSB,[Default]), UsedName(RP,[Default]), UsedName(CONTINUE,[Default]), UsedName(WHILE,[Default]), UsedName(ID,[Default]), UsedName(OR,[Default]), UsedName(AND,[Default]), UsedName(LEQ,[Default]), UsedName(FOR,[Default]), UsedName(WS,[Default]), UsedName(NOT,[Default]), UsedName(ELSE,[Default]), UsedName(RSB,[Default]), UsedName(IF,[Default]), UsedName(LB,[Default]), UsedName(BREAK,[Default]), UsedName(_serializedATN,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) mc.parser.MCLexer: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) mc.parser.MCLexer.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of TestLexer. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of TestParser. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe mc.parser.MCParser has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(VartypeContext,[Default]), UsedName(varname,[Default]), UsedName(GEQ,[Default]), UsedName(RULE_functype,[Default]), UsedName(ERROR_CHAR,[Default]), UsedName(PrimitivetypeContext,[Default]), UsedName(DIV,[Default]), UsedName(block,[Default]), UsedName(DO,[Default]), UsedName(T__0,[Default]), UsedName(RULE_block,[Default]), UsedName(RETURN,[Default]), UsedName(FLOATTYPE,[Default]), UsedName(IfelseContext,[Default]), UsedName(forstmt,[Default]), UsedName(INTTYPE,[Default]), UsedName(VariableContext,[Default]), UsedName(literal,[Default]), UsedName(VardeclContext,[Default]), UsedName(ifnoelse,[Default]), UsedName(RULE_declaration,[Default]), UsedName(ForstmtContext,[Default]), UsedName(operand,[Default]), UsedName(ArglistContext,[Default]), UsedName(ADD,[Default]), UsedName(paralist,[Default]), UsedName(RULE_funcdecl,[Default]), UsedName(RULE_paralist,[Default]), UsedName(UNTIL,[Default]), UsedName(BreakstmtContext,[Default]), UsedName(DeclpartContext,[Default]), UsedName(IfnoelseContext,[Default]), UsedName(BlockbodyContext,[Default]), UsedName(IfstmtContext,[Default]), UsedName(RULE_ifnoelse,[Default]), UsedName(declaration,[Default]), UsedName(naexpression,[Default]), UsedName(ParalistContext,[Default]), UsedName(exp,[Default]), UsedName(MOL,[Default]), UsedName(RULE_returnstmt,[Default]), UsedName(COMMENT,[Default]), UsedName(StmtpartContext,[Default]), UsedName(REPEAT,[Default]), UsedName(LT,[Default]), UsedName(stmtpart,[Default]), UsedName(stmt,[Default]), UsedName(BOOLLIT,[Default]), UsedName(VarnameContext,[Default]), UsedName(NaexpressionContext,[Default]), UsedName(RB,[Default]), UsedName(NEQ,[Default]), UsedName(MUL,[Default]), UsedName(UNCLOSE_STRING,[Default]), UsedName(ParadeclContext,[Default]), UsedName(RULE_blockbody,[Default]), UsedName(VarlistContext,[Default]), UsedName(BlockContext,[Default]), UsedName(whilestmt,[Default]), UsedName(FuncdeclContext,[Default]), UsedName(RULE_body,[Default]), UsedName(WhilestmtContext,[Default]), UsedName(vartype,[Default]), UsedName(BOOLTYPE,[Default]), UsedName(arglist,[Default]), UsedName(functype,[Default]), UsedName(DeclarationContext,[Default]), UsedName(FLOATLIT,[Default]), UsedName(RULE_whilestmt,[Default]), UsedName(ILLEGAL_ESCAPE,[Default]), UsedName(varlist,[Default]), UsedName(RULE_varlist,[Default]), UsedName(SEMI,[Default]), UsedName(paradecl,[Default]), UsedName(UNSIGNINT,[Default]), UsedName(breakstmt,[Default]), UsedName(GT,[Default]), UsedName(STRINGTYPE,[Default]), UsedName(RULE_varname,[Default]), UsedName(funcdecl,[Default]), UsedName(EQ,[Default]), UsedName(INTLIT,[Default]), UsedName(RULE_paradecl,[Default]), UsedName(variable,[Default]), UsedName(ifelse,[Default]), UsedName(ReturnstmtContext,[Default]), UsedName(LP,[Default]), UsedName(RULE_variable,[Default]), UsedName(CM,[Default]), UsedName(VOIDTYPE,[Default]), UsedName(RULE_stmt,[Default]), UsedName(STRINGLIT,[Default]), UsedName(returnstmt,[Default]), UsedName(ifstmt,[Default]), UsedName(expression,[Default]), UsedName(SUB,[Default]), UsedName(RULE_breakstmt,[Default]), UsedName(ASSIGN,[Default]), UsedName(RULE_vardecl,[Default]), UsedName(RULE_ifstmt,[Default]), UsedName(OperandContext,[Default]), UsedName(vardecl,[Default]), UsedName(RULE_funcall,[Default]), UsedName(LSB,[Default]), UsedName(RP,[Default]), UsedName(CONTINUE,[Default]), UsedName(WHILE,[Default]), UsedName(ID,[Default]), UsedName(MctypeContext,[Default]), UsedName(OR,[Default]), UsedName(AND,[Default]), UsedName(LEQ,[Default]), UsedName(LiteralContext,[Default]), UsedName(RULE_forstmt,[Default]), UsedName(RULE_ifelse,[Default]), UsedName(RULE_operand,[Default]), UsedName(StmtContext,[Default]), UsedName(RULE_naexpression,[Default]), UsedName(RULE_primitivetype,[Default]), UsedName(RULE_literal,[Default]), UsedName(RULE_mctype,[Default]), UsedName(RULE_continuestmt,[Default]), UsedName(blockbody,[Default]), UsedName(BodyContext,[Default]), UsedName(ContinuestmtContext,[Default]), UsedName(RULE_declpart,[Default]), UsedName(declpart,[Default]), UsedName(ExpressionContext,[Default]), UsedName(primitivetype,[Default]), UsedName(RULE_expression,[Default]), UsedName(FOR,[Default]), UsedName(WS,[Default]), UsedName(ExpContext,[Default]), UsedName(NOT,[Default]), UsedName(ELSE,[Default]), UsedName(RULE_vartype,[Default]), UsedName(RULE_exp,[Default]), UsedName(continuestmt,[Default]), UsedName(RSB,[Default]), UsedName(IF,[Default]), UsedName(LB,[Default]), UsedName(BREAK,[Default]), UsedName(_serializedATN,[Default]), UsedName(RULE_stmtpart,[Default]), UsedName(body,[Default]), UsedName(RULE_arglist,[Default]), UsedName(FunctypeContext,[Default]), UsedName(mctype,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) mc.parser.MCParser: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) mc.parser.MCParser.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of TestParser. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes: [0m
[0m[[0m[0mdebug[0m] [0m[0m	removed:Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set(/Users/minhtribk12/Google_Drive/Study/Master/Principles of Programming Languages/Assignment/source/initial/src/test/scala/LexerSuite.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set(NamesChange(mc.parser.MCLexer,ModifiedNames(changes = UsedName(GEQ,[Default]), UsedName(ERROR_CHAR,[Default]), UsedName(DIV,[Default]), UsedName(DO,[Default]), UsedName(T__0,[Default]), UsedName(RETURN,[Default]), UsedName(FLOATTYPE,[Default]), UsedName(INTTYPE,[Default]), UsedName(ADD,[Default]), UsedName(UNTIL,[Default]), UsedName(MOL,[Default]), UsedName(COMMENT,[Default]), UsedName(REPEAT,[Default]), UsedName(LT,[Default]), UsedName(BOOLLIT,[Default]), UsedName(RB,[Default]), UsedName(NEQ,[Default]), UsedName(MUL,[Default]), UsedName(UNCLOSE_STRING,[Default]), UsedName(BOOLTYPE,[Default]), UsedName(FLOATLIT,[Default]), UsedName(ILLEGAL_ESCAPE,[Default]), UsedName(SEMI,[Default]), UsedName(UNSIGNINT,[Default]), UsedName(GT,[Default]), UsedName(STRINGTYPE,[Default]), UsedName(EQ,[Default]), UsedName(INTLIT,[Default]), UsedName(LP,[Default]), UsedName(CM,[Default]), UsedName(VOIDTYPE,[Default]), UsedName(STRINGLIT,[Default]), UsedName(SUB,[Default]), UsedName(ASSIGN,[Default]), UsedName(LSB,[Default]), UsedName(RP,[Default]), UsedName(CONTINUE,[Default]), UsedName(WHILE,[Default]), UsedName(ID,[Default]), UsedName(OR,[Default]), UsedName(AND,[Default]), UsedName(LEQ,[Default]), UsedName(FOR,[Default]), UsedName(WS,[Default]), UsedName(NOT,[Default]), UsedName(ELSE,[Default]), UsedName(RSB,[Default]), UsedName(IF,[Default]), UsedName(LB,[Default]), UsedName(BREAK,[Default]), UsedName(_serializedATN,[Default]))), NamesChange(mc.parser.MCParser,ModifiedNames(changes = UsedName(VartypeContext,[Default]), UsedName(varname,[Default]), UsedName(GEQ,[Default]), UsedName(RULE_functype,[Default]), UsedName(ERROR_CHAR,[Default]), UsedName(PrimitivetypeContext,[Default]), UsedName(DIV,[Default]), UsedName(block,[Default]), UsedName(DO,[Default]), UsedName(T__0,[Default]), UsedName(RULE_block,[Default]), UsedName(RETURN,[Default]), UsedName(FLOATTYPE,[Default]), UsedName(IfelseContext,[Default]), UsedName(forstmt,[Default]), UsedName(INTTYPE,[Default]), UsedName(VariableContext,[Default]), UsedName(literal,[Default]), UsedName(VardeclContext,[Default]), UsedName(ifnoelse,[Default]), UsedName(RULE_declaration,[Default]), UsedName(ForstmtContext,[Default]), UsedName(operand,[Default]), UsedName(ArglistContext,[Default]), UsedName(ADD,[Default]), UsedName(paralist,[Default]), UsedName(RULE_funcdecl,[Default]), UsedName(RULE_paralist,[Default]), UsedName(UNTIL,[Default]), UsedName(BreakstmtContext,[Default]), UsedName(DeclpartContext,[Default]), UsedName(IfnoelseContext,[Default]), UsedName(BlockbodyContext,[Default]), UsedName(IfstmtContext,[Default]), UsedName(RULE_ifnoelse,[Default]), UsedName(declaration,[Default]), UsedName(naexpression,[Default]), UsedName(ParalistContext,[Default]), UsedName(exp,[Default]), UsedName(MOL,[Default]), UsedName(RULE_returnstmt,[Default]), UsedName(COMMENT,[Default]), UsedName(StmtpartContext,[Default]), UsedName(REPEAT,[Default]), UsedName(LT,[Default]), UsedName(stmtpart,[Default]), UsedName(stmt,[Default]), UsedName(BOOLLIT,[Default]), UsedName(VarnameContext,[Default]), UsedName(NaexpressionContext,[Default]), UsedName(RB,[Default]), UsedName(NEQ,[Default]), UsedName(MUL,[Default]), UsedName(UNCLOSE_STRING,[Default]), UsedName(ParadeclContext,[Default]), UsedName(RULE_blockbody,[Default]), UsedName(VarlistContext,[Default]), UsedName(BlockContext,[Default]), UsedName(whilestmt,[Default]), UsedName(FuncdeclContext,[Default]), UsedName(RULE_body,[Default]), UsedName(WhilestmtContext,[Default]), UsedName(vartype,[Default]), UsedName(BOOLTYPE,[Default]), UsedName(arglist,[Default]), UsedName(functype,[Default]), UsedName(DeclarationContext,[Default]), UsedName(FLOATLIT,[Default]), UsedName(RULE_whilestmt,[Default]), UsedName(ILLEGAL_ESCAPE,[Default]), UsedName(varlist,[Default]), UsedName(RULE_varlist,[Default]), UsedName(SEMI,[Default]), UsedName(paradecl,[Default]), UsedName(UNSIGNINT,[Default]), UsedName(breakstmt,[Default]), UsedName(GT,[Default]), UsedName(STRINGTYPE,[Default]), UsedName(RULE_varname,[Default]), UsedName(funcdecl,[Default]), UsedName(EQ,[Default]), UsedName(INTLIT,[Default]), UsedName(RULE_paradecl,[Default]), UsedName(variable,[Default]), UsedName(ifelse,[Default]), UsedName(ReturnstmtContext,[Default]), UsedName(LP,[Default]), UsedName(RULE_variable,[Default]), UsedName(CM,[Default]), UsedName(VOIDTYPE,[Default]), UsedName(RULE_stmt,[Default]), UsedName(STRINGLIT,[Default]), UsedName(returnstmt,[Default]), UsedName(ifstmt,[Default]), UsedName(expression,[Default]), UsedName(SUB,[Default]), UsedName(RULE_breakstmt,[Default]), UsedName(ASSIGN,[Default]), UsedName(RULE_vardecl,[Default]), UsedName(RULE_ifstmt,[Default]), UsedName(OperandContext,[Default]), UsedName(vardecl,[Default]), UsedName(RULE_funcall,[Default]), UsedName(LSB,[Default]), UsedName(RP,[Default]), UsedName(CONTINUE,[Default]), UsedName(WHILE,[Default]), UsedName(ID,[Default]), UsedName(MctypeContext,[Default]), UsedName(OR,[Default]), UsedName(AND,[Default]), UsedName(LEQ,[Default]), UsedName(LiteralContext,[Default]), UsedName(RULE_forstmt,[Default]), UsedName(RULE_ifelse,[Default]), UsedName(RULE_operand,[Default]), UsedName(StmtContext,[Default]), UsedName(RULE_naexpression,[Default]), UsedName(RULE_primitivetype,[Default]), UsedName(RULE_literal,[Default]), UsedName(RULE_mctype,[Default]), UsedName(RULE_continuestmt,[Default]), UsedName(blockbody,[Default]), UsedName(BodyContext,[Default]), UsedName(ContinuestmtContext,[Default]), UsedName(RULE_declpart,[Default]), UsedName(declpart,[Default]), UsedName(ExpressionContext,[Default]), UsedName(primitivetype,[Default]), UsedName(RULE_expression,[Default]), UsedName(FOR,[Default]), UsedName(WS,[Default]), UsedName(ExpContext,[Default]), UsedName(NOT,[Default]), UsedName(ELSE,[Default]), UsedName(RULE_vartype,[Default]), UsedName(RULE_exp,[Default]), UsedName(continuestmt,[Default]), UsedName(RSB,[Default]), UsedName(IF,[Default]), UsedName(LB,[Default]), UsedName(BREAK,[Default]), UsedName(_serializedATN,[Default]), UsedName(RULE_stmtpart,[Default]), UsedName(body,[Default]), UsedName(RULE_arglist,[Default]), UsedName(FunctypeContext,[Default]), UsedName(mctype,[Default]))))[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(LexerSuite)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(LexerSuite)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(/Users/minhtribk12/Google_Drive/Study/Master/Principles of Programming Languages/Assignment/source/initial/src/test/scala/LexerSuite.scala)[0m
[0m[[0m[0minfo[0m] [0m[0mCompiling 1 Scala source to /Users/minhtribk12/Google_Drive/Study/Master/Principles of Programming Languages/Assignment/source/initial/target/scala-2.12/test-classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.1.1:compile for Scala 2.12.3[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.1.1:compile for Scala 2.12.3[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 49cd7390 for Scala compiler version 2.12.3[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/jre/classes:/Users/minhtribk12/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.3.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/Users/minhtribk12/Google_Drive/Study/Master/Principles of Programming Languages/Assignment/source/initial/target/scala-2.12/test-classes:/Users/minhtribk12/Google_Drive/Study/Master/Principles of Programming Languages/Assignment/source/initial/target/scala-2.12/classes:/Users/minhtribk12/Google_Drive/Study/Master/Principles of Programming Languages/Assignment/source/initial/./external/antlr-4.6-complete.jar:/Users/minhtribk12/Google_Drive/Study/Master/Principles of Programming Languages/Assignment/source/initial/./external/jasmin.jar:/Users/minhtribk12/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.1.jar:/Users/minhtribk12/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.1.jar:/Users/minhtribk12/.ivy2/cache/org.scala-lang/scala-reflect/jars/scala-reflect-2.12.3.jar:/Users/minhtribk12/.ivy2/cache/org.scala-lang.modules/scala-xml_2.12/bundles/scala-xml_2.12-1.0.5.jar:/Users/minhtribk12/.ivy2/cache/org.scala-lang.modules/scala-parser-combinators_2.12/bundles/scala-parser-combinators_2.12-1.0.4.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 1.545666454 s[0m
[0m[[0m[0minfo[0m] [0m[0mDone compiling.[0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll newly invalidated classes after taking into account (previously) recompiled classes:Set()[0m
