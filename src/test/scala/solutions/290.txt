Program(List(VarDecl(Id("n"),IntType),VarDecl(Id("i"),IntType),VarDecl(Id("flag"),IntType),VarDecl(Id("a"),BoolType),VarDecl(Id("b"),ArrayType(IntLiteral(10),BoolType)),VarDecl(Id("c"),ArrayType(IntLiteral(5),FloatType)),VarDecl(Id("d"),FloatType),VarDecl(Id("e"),ArrayType(IntLiteral(10),FloatType)),FuncDecl(Id("main"),List(),IntType,Block(List(),List(BinaryOp("=",Id("flag"),IntLiteral(0)),CallExpr(Id("printf"),List(StringLiteral("Enter a positive integer: "))),CallExpr(Id("scanf"),List(StringLiteral("%d"),Id("n"))),For(BinaryOp("=",Id("i"),IntLiteral(2)),BinaryOp("<=",Id("i"),BinaryOp("/",Id("n"),IntLiteral(2))),BinaryOp("=",Id("i"),BinaryOp("+",Id("i"),IntLiteral(1))),Block(List(),List(If(BinaryOp("==",CallExpr(Id("checkPrime"),List(Id("i"))),IntLiteral(1)),Block(List(),List(If(BinaryOp("==",CallExpr(Id("checkPrime"),List(BinaryOp("-",Id("n"),Id("i")))),IntLiteral(1)),Block(List(),List(CallExpr(Id("printf"),List(StringLiteral("%d = %d + %d\n"),Id("n"),Id("i"),BinaryOp("-",Id("n"),Id("i")))),BinaryOp("=",Id("flag"),IntLiteral(1)))),None))),None)))),If(BinaryOp("==",Id("flag"),IntLiteral(0)),CallExpr(Id("printf"),List(StringLiteral("%d cannot be expressed as the sum of two prime numbers."),Id("n"))),None),Return(Some(IntLiteral(0)))))),FuncDecl(Id("checkPrime"),List(VarDecl(Id("n"),IntType)),IntType,Block(List(VarDecl(Id("i"),IntType),VarDecl(Id("isPrime"),IntType)),List(BinaryOp("=",Id("isPrime"),IntLiteral(1)),For(BinaryOp("=",Id("i"),IntLiteral(2)),BinaryOp("<=",Id("i"),BinaryOp("/",Id("n"),IntLiteral(2))),BinaryOp("=",Id("i"),BinaryOp("+",Id("i"),IntLiteral(1))),Block(List(),List(If(BinaryOp("==",BinaryOp("/",Id("n"),Id("i")),IntLiteral(0)),Block(List(),List(BinaryOp("=",Id("isPrime"),IntLiteral(0)),Break)),None)))),Return(Some(Id("isPrime"))))))))